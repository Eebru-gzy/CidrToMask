pipeline {
  agent any
  tools {nodejs "NodeJs"}
  stages {
    stage('Clone Repo') {
      steps{
        git credentialsId: 'f00ff383-c25e-4332-8f82-0a153badb25a', url: 'git@github.com:wizeline/wizeline-sre-opeyemi-alao.git'
      }
    }
    stage('Install dependencies') {
      steps {
        dir("cidr_convert_api/node") {
          sh "pwd"
          sh 'npm install'
          sh 'echo ${GIT_BRANCH}'
          sh 'echo ${env.BRANCH_NAME}'
          sh 'echo ${currentBuild.BRANCH_NAME}'
          sh 'echo ${currentBuild}'
        }
      }
    }
    stage('Test') {
      steps {
        dir("cidr_convert_api/node") {
          sh 'npm test'
        }
      }
    } 
    stage('Docker Build and push') {
      when {
        expression {currentBuild.result != 'UNSTABLE'}
      }
      steps {
        dir("cidr_convert_api/node") {
          sh '''
              docker build -t opeyemi-alao:${BUILD_NUMBER} .
              docker tag opeyemi-alao:THT wizelinedevops/opeyemi-alao:${BUILD_NUMBER} 
              docker push wizelinedevops/opeyemi-alao:${BUILD_NUMBER} 
             '''
        }
      }
    }
    stage ('Deploy to Dev Environment') {
      when {
        anyOf {
          expression {currentBuild.BRANCH_NAME == 'origin/dev'}
          expression {currentBuild.BRANCH_NAME == 'dev'}
          expression{env.BRANCH_NAME != 'master'}
        }
      }
      steps {
        sh 'kubectl --kubeconfig=${KUBECONFIG} --namespace=development set image deployment/api api=wizelinedevops/opeyemi-alao:${BUILD_NUMBER}'
      }
    }
    stage ('Deploy to staging Environment') {
      when {
        branch 'staging'
      }
      steps {
        sh 'kubectl --kubeconfig=${KUBECONFIG} --namespace=staging set image deployment/api api=wizelinedevops/opeyemi-alao:${BUILD_NUMBER}'
      }
    }
    stage ('Deploy to Prod Environment') {
      when {
        branch 'master'
      }
      steps {
        sh 'kubectl --kubeconfig=${KUBECONFIG} --namespace=production set image deployment/api api=wizelinedevops/opeyemi-alao:${BUILD_NUMBER}'
      }
    }
  }
}

// stage('Checking for test error') {
//   steps {
//     if (currentBuild.result == 'FAILURE') {
//       error("Aborting the Pipeline, one or more test failed")
//       return
//     }
//   }
// }

// stage('Push to staging') {
//       dir("cidr_convert_api/node") {
//         steps {
//           sshagent(['f00ff383-c25e-4332-8f82-0a153badb25a']) {
//             sh('git push origin staging') 
//           }
//         }
//       }
//     }